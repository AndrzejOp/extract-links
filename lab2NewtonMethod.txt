fn f(x : f64) -> f64{
    8.0 * x - 632.0
}

fn sgn ( x: f64) -> i8{
    let eps = 0.0000000001;

    if x > eps {
        1
    }
    else if x.abs() < eps {
        0
    }
    else {
        -1
    }
}

fn sgn_f_deriv(x : f64) -> i8{
    let eps = 0.0000000001;

    let f_deriv = f(x + eps) - f(x);
    sgn(f_deriv)
}
fn calc_x0_with_Newton_method(n: u64) -> f64{
    let mut x = 25.0;
    let mut delta = 2.0;
    let mut prvs_jump_left= false;

    for i in 0..n {
        let f_val = f(x);
        let deriv_sgn = sgn_f_deriv(x);

        println!("f: {}", f_val);
        println!("f': {}", deriv_sgn);
        println!("delta: {}", delta);
        println!("x: {}", x);
        println!();


        let mut jump_left = false;

        if (sgn(f_val) > 0 && deriv_sgn < 0) ||
            (sgn(f_val) < 0 && deriv_sgn > 0) {
            x += delta;
        }
        else {
            x -= delta;
            jump_left = true;
        }
        if jump_left != prvs_jump_left {
            delta /= 2.0;
            prvs_jump_left = jump_left;
        }

    }
    x

}

fn main() {
   
    calc_x0_with_Newton_method(100);


}
